-- 내가 약한 부분 정리 -> 2021.11.15(화)  대비

-- 2021.11.13(토) 기본문법, 함수
-- EMPLOYEE 테이블 > EMAIL 컬럼의 (문자열 중) @의 위치 찾아보기
SELECT EMAIL, INSTR(EMAIL, '@')
FROM EMPLOYEE;

-- 이메일에서 ID부분만 추출해서 이름, 이메일, ID 조회
SELECT EMP_NAME, EMAIL, SUBSTR(EMAIL, 1, INSTR(EMAIL, '@') - 1) AS "ID" -- 반환값이 맞다면 함수 안에 함수 사용 가능
FROM EMPLOYEE;

-- 모든 직원의 주민등록번호 뒤 6자리를 마스킹 처리해서 표현
SELECT EMP_NAME AS "이름", RPAD(SUBSTR(EMP_NO, 1, 8), 14, '*') AS "주민등록번호"
FROM EMPLOYEE;

-- 각 직원별로 고용일로부터 오늘까지 근무일수(SYSDATE - HIRE_DATE)를 조회
-- 근무일수는 소수점 아래의 수는 버림 처리하고, "xx일" 형식으로, 오른쪽 정렬해서 출력
SELECT EMP_NAME, LPAD(CONCAT(FLOOR(SYSDATE - HIRE_DATE), '일'), 7) AS "근무일수"
FROM EMPLOYEE;

-- 각 직원별로 고용일~오늘 근무일수, 근무개월수, 근무년수 조회
SELECT EMP_NAME
    , LPAD(FLOOR(SYSDATE - HIRE_DATE), 5)||'일' AS 근무일수 -- 가독성을 위해 줄바꿈 + TAB 한 번; 함수 3개 중첩 -> 가장 안쪽 괄호부터 실행되어 그 결과/반환값이 인자로 전달되고..
    , LPAD(FLOOR(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)), 5)||'개월' AS 근무개월수
    , LPAD(EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM HIRE_DATE), 3)||'년' AS 근무년수
FROM EMPLOYEE
WHERE ENT_YN = 'N';

-- 전체 사원들의 직원명, 입사일, 입사 후 6개월이 흘렀을 때의 날짜 조회
SELECT EMP_NAME, HIRE_DATE, ADD_MONTHS(HIRE_DATE, 6)
FROM EMPLOYEE;

-- 영어(AMERICAN)로 언어 변경
ALTER SESSION SET NLS_LANGUAGE = AMERICAN;

SELECT NEXT_DAY(SYSDATE, 'SUNDAY')
FROM DUAL; -- 2021.11.13(토) 복습 시 질의 결과 = 21/11/14

-- 한국어(KOREAN)로 언어 변경
ALTER SESSION SET NLS_LANGUAGE = KOREAN;

SELECT NEXT_DAY(SYSDATE, '목욜')
FROM DUAL; -- 2021.11.13(토) 복습 시 질의 결과 = 21/11/18

-- 이름, 입사일, 입사한 달의 마지막 날짜, 입사월의 급여 및 보너스(일할 계산) 조회
SELECT EMP_NAME, HIRE_DATE, LAST_DAY(HIRE_DATE), SALARY, BONUS, CONCAT(TO_CHAR(SALARY * (1 + NVL(BONUS,0)) * (LAST_DAY(HIRE_DATE) - HIRE_DATE) / 30, '999,999,999.0'), '원') "입사월 급여/보너스"
FROM EMPLOYEE;

SELECT EMP_NAME, BONUS
    , TO_CHAR((SALARY + SALARY * BONUS) * 12, '999,999,999') "연소득(보너스 NULL)"
    , TO_CHAR((SALARY + SALARY * NVL(BONUS, 0)) * 12, '999,999,999') AS "연소득(급여+보너스)"    
FROM EMPLOYEE;

SELECT EMP_NAME, NVL(DEPT_CODE, '없음')
FROM EMPLOYEE
ORDER BY DEPT_CODE;

-- 사원명, 부서코드, 부서코드가 있는 경우 '부서 배치 완료' VS 없는 경우 '없음'
SELECT EMP_NAME, DEPT_CODE, NVL2(DEPT_CODE, '부서 배치 완료', '없음') "부서 배치 여부"
FROM EMPLOYEE;

-- NULLIF(비교대상1, 비교대상2): 2개의 값이 동일할 경우 NULL을 반환 VS 동일하지 않을 경우 비교대상 1을 반환
SELECT NULLIF('123', '123')
FROM DUAL; -- (null)(질의 결과 창 더블클릭해보면 아무 값도 들어있지 않은 빈칸 상태)

SELECT NULLIF('123', '456')
FROM DUAL; -- 123

-- 사번, 사원명, 주민등록번호로부터 성별 자리 추출
SELECT EMP_ID, EMP_NAME, DECODE(SUBSTR(EMP_NO, 8, 1), 1, '남', 2, '여', 3, '남', 4, '여') "성별" -- 1 또는 3이 '남', 2 또는 4가 '여' 하고 싶으면 조건 이어서 쓰거나, 연산식(2로 나눈 나머지 등) 사용하거나 등등
FROM EMPLOYEE
ORDER BY 성별, 1;

SELECT EMP_ID, EMP_NAME, DECODE(MOD(SUBSTR(EMP_NO, 8, 1), 2), 1, '남', 0, '여') "성별"
FROM EMPLOYEE;

-- 성별 인원 및 평균급여 조회
SELECT DECODE(MOD(SUBSTR(EMP_NO, 8, 1), 2), 1, '남', 0, '여') "성별", COUNT(*) "인원수", TO_CHAR(AVG(SALARY), 'L999,999,999') "평균급여"
FROM EMPLOYEE
GROUP BY MOD(SUBSTR(EMP_NO, 8, 1), 2);

-- 사원명, 급여, 급여등급(고/중/초급 = SALARY 값이 500만원 초과/350만원 초과 500만원 이하/350만원 이하)
SELECT EMP_NAME
    , TO_CHAR(SALARY, 'L999,999,999') "급여"
    , CASE WHEN SALARY > 5000000 THEN '고급'
           WHEN 3500000 < SALARY AND SALARY <= 5000000 THEN '중급'
           ELSE '초급'
      END "급여 등급"
FROM EMPLOYEE
WHERE SALARY IS NOT NULL
ORDER BY "급여" DESC;

-- 부서코드 D5인 사원들의 총 급여 합
SELECT SUM(SALARY)
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'; -- 15760000

-- 남자 사원의 총 급여
SELECT TO_CHAR(SUM(SALARY), 'L999,999,999')
FROM EMPLOYEE
WHERE SUBSTR(EMP_NO, 8, 1) = '1';

-- -- 부서 배치가 완료된 사원 수
/* COUNT 함수는 값이 NULL이 아닌 행의 갯수만 세서 반환하는 바, IS NOT NULL 조건 붙일 필요 없음
SELECT COUNT(*)
FROM EMPLOYEE
WHERE DEPT_CODE IS NOT NULL;
*/
SELECT COUNT(DEPT_CODE)
FROM EMPLOYEE; -- 21

-- 부서배치가 완료된 남성 사원 수
SELECT COUNT(DEPT_CODE)
FROM EMPLOYEE
WHERE SUBSTR(EMP_NO, 8, 1) = '1'; -- AND DEPT_CODE IS NULL;

-- 직원명과 주민번호 조회; 단, 주민번호 9번째 자리~끝 '*' 문자로 채움/마스킹 e.g. 강은영 123456-2******
SELECT EMP_NAME "직원명", RPAD(SUBSTR(EMP_NO, 1, 8), 14, '*') "주민번호" -- 함수 중첩된 경우 안쪽 괄호부터 처리
FROM EMPLOYEE
ORDER BY "직원명";

SELECT EMP_NAME 직원명, REPLACE(EMP_NO, SUBSTR(EMP_NO, 9, 6), '******') 주민번호 FROM EMPLOYEE;

-- 부서코드가 D5, D6인 직원들 중에서 2004년도에 입사한 직원의 수 조회
SELECT COUNT(*)
FROM EMPLOYEE
WHERE DEPT_CODE IN ('D5', 'D6') AND EXTRACT(YEAR FROM HIRE_DATE) = 2004;

SELECT COUNT(*)
FROM EMPLOYEE
WHERE DEPT_CODE IN ('D5', 'D6') AND SUBSTR(HIRE_DATE, 1, 2) = '04';

SELECT COUNT(*)
FROM EMPLOYEE
WHERE DEPT_CODE IN ('D5', 'D6') AND TO_CHAR(HIRE_DATE, 'YYYY') = '2004';

-- EMPLOYEE 테이블에서 사원의 주민번호를 확인하여 생년월일을 각각 조회
-- 이름 | 생년 | 생월 | 생일
-- 홍길 | 00년 | 00월 | 00일
SELECT EMP_NAME "이름"
    , CONCAT(SUBSTR(EMP_NO, 1, 2), '년') "생년" -- EMP_NO = 문자타입
    , CONCAT(SUBSTR(EMP_NO, 3, 2), '월') "생월" -- 주민번호에서 잘라오면 어차피 0X월로 표기되니까 LPAD 필요 없음
    , SUBSTR(EMP_NO, 5, 2) || '일' "생일"
FROM EMPLOYEE;

-- 추가 연습: EMPLOYEE 테이블에서 사원의 입사일을 확인하여 입사년도/월/일을 각각 조회
SELECT EMP_NAME "이름"
    , CONCAT(SUBSTR(HIRE_DATE, 1, 2), '년') "입사년도"
    , CONCAT(SUBSTR(HIRE_DATE, 4, 2), '월') "입사월"
    , CONCAT(SUBSTR(HIRE_DATE, 7, 2), '일') "입사일"
FROM EMPLOYEE;

-- 부서코드가 D5이면 총무부, D6이면 기획부, D9이면 영업부로 처리(case 사용);
-- 단, 부서코드가 D5, D6, D9인 직원의 사원명, 부서코드, 부서명만 조회함 + 부서코드 기준 오름차순 정렬
SELECT EMP_NAME "사원명" -- 실행순서3: SELECT절 위->아래로
    , DEPT_CODE "부서코드"
    , CASE WHEN DEPT_CODE = 'D5' THEN '총무부'
           WHEN DEPT_CODE = 'D6' THEN '기획부'
           ELSE '영업부' -- WHEN DEPT_CODE = 'D9' THEN '영업부' 명시적으로 써도 됨
      END "부서명"
FROM EMPLOYEE -- 실행순서1
WHERE DEPT_CODE IN ('D5', 'D6', 'D9') -- 실행순서2
ORDER BY 2; -- "부서코드" 컬럼을 의미; Oracle에서는 순서 셀 때 1부터 시작; 실행순서4

SELECT EMP_NAME "사원명" -- 실행순서3: SELECT절 위->아래로
    , DEPT_CODE "부서코드"
    , DECODE(DEPT_CODE, 'D5', '총무부', 'D6', '기획부', 'D9', '영업부') "부서명"
FROM EMPLOYEE -- 실행순서1
WHERE DEPT_CODE IN ('D5', 'D6', 'D9') -- 실행순서2
ORDER BY 2;

-- 2021.11.14(일) JOIN, GROUP BY
-- NATURAL(자연) JOIN: 운 좋게도 2개의 테이블에 일치하는 컬럼/컬럼명이 똑같은 게 유일하게 1개 존재 시 사용 가능 -> 알아서 매칭
SELECT EMP_ID, EMP_NAME, JOB_CODE, JOB_NAME
FROM EMPLOYEE
NATURAL JOIN JOB;

-- 사원명, 급여, 급여등급(SAL_LEVEL) 함께 조회
-- ORACLE 전용 구문
SELECT EMP_NAME, SALARY, E.SAL_LEVEL
FROM EMPLOYEE E, SAL_GRADE S -- FROM절에 JOIN해줄 테이블 모두 나열
-- WHERE MIN_SAL <= SALARY AND SALARY <= MAX_SAL;
WHERE SALARY BETWEEN MIN_SAL AND MAX_SAL;
-- ANSI 구문(ON구문만 가능)
SELECT EMP_NAME, SALARY, E.SAL_LEVEL
FROM EMPLOYEE E
JOIN SAL_GRADE ON (SALARY BETWEEN MIN_SAL AND MAX_SAL);

-- 사원 사번, 사원명, 사원 부서코드, 사원 급여 + 사수 사번, 사수명, 사수 부서코드, 사수 급여 조회
-- ORACLE 전용 구문
SELECT E.EMP_ID "사원 사번", E.EMP_NAME "사원명", E.DEPT_CODE "사원 부서코드", E.SALARY "사원 급여",
    M.EMP_ID "사수 사번", M.EMP_NAME "사수명", M.DEPT_CODE "사수 부서코드", M.SALARY "사수 급여"
FROM EMPLOYEE E, EMPLOYEE M
-- WHERE E.MANAGER_ID = M.EMP_ID; -- 나의 사수의 MANAGER_ID와 사수의 EMP_ID를 연결 -> 동등JOIN -> 사수가 있는 사람만 나옴
WHERE E.MANAGER_ID = M.EMP_ID(+); -- 사수가 없는 사원도 조회되도록 LEFT 포괄/OUTER JOIN

-- ANSI 구문
SELECT E.EMP_ID "사원 사번", E.EMP_NAME "사원명", E.DEPT_CODE "사원 부서코드", E.SALARY "사원 급여",
    M.EMP_ID "사수 사번", M.EMP_NAME "사수명", M.DEPT_CODE "사수 부서코드", M.SALARY "사수 급여"
FROM EMPLOYEE E
LEFT JOIN EMPLOYEE M ON (E.MANAGER_ID = M.EMP_ID);

/* 실행 순서
 5번: SELECT *(전체)/조회하려는 컬럼/산술연산/함수식 (AS) "별명"
 1번: FROM 조회하고자 하는 테이블
     (JOIN)
 2번: WHERE 조건식; 조건이 많은 경우 앞에서부터, 단 연산자 우선순위에 따라(e.g. AND -> OR).. 중첩함수는 안쪽 괄호부터..
 3번: GROUP BY 그룹 기준에 해당하는 컬럼명/함수식; GROUP을 지어주고 조건을 주어야 하는데 실행 순서에 따라 WHERE절이 GROUP BY절보다 앞에 오는 바 WHERE절을 사용할 수는 없으므로, GROUP을 지어주는 경우 WHERE절 대신 HAVING절 사용함
 4번: HAVING 그룹 함수식에 대한 조건식 -> 조회하고자 하는 컬럼(조건) 걸러냄
 6번: ORDER BY 정렬 기준에 해당하는 컬럼명/별칭/컬럼순번 ASC/DESC NULLS FIRST/LAST;
*/

-- 각 부서별 보너스를 받는 사원이 없는 부서만을 조회
-- 방법1)
SELECT DEPT_CODE
FROM EMPLOYEE
GROUP BY DEPT_CODE
HAVING COUNT(BONUS) = 0; -- 보너스 받는 사람이 없음
-- NULL = 값이 없음 -> COUNT() 연산 시 포함 안 됨
-- WHERE BONUS IS NULL -- 갯수 반환(X) BONUS의 값이 NULL인 행을 찾는 조건(O)
-- SUM(BONUS) = 연산 결과 -> NULL이 나올 수 없음

-- 방법2)
SELECT DEPT_CODE
FROM EMPLOYEE
GROUP BY DEPT_CODE
HAVING SUM(NVL(BONUS, 0)) = 0; -- BONUS컬럼의 NULL값을 0으로 처리한 뒤, '부서별 BONUS의 합이 0인 부서 = 보너스를 받는 사원이 없는 부서'

/* 집합(SET) 연산자(OPERATORS): 여러 개의 QUERY문(SELECT, INSERT, UPDATE, DELETE 등 질의를 던지는 것)을 가지고 하나의 QUERY문으로 만드는 연산자
 1. UNION(합집합): 두 쿼리문을 수행한 결과값을 더한 후, 중복되는 부분은 한 번 뺀 것 -> 중복된 값은 하나만 보여줌; OR
 2. UNION ALL(합집합 결과에 교집합이 더해짐): 두 쿼리문을 수행한 결과값을 무조건 더함 + 합집합에서 중복 제거를 하지 않음 -> 중복을 모두 보여줌
 3. INTERSECT(교집합): 두 쿼리문을 수행한 결과값의 중복된 결과값 부분; AND
 4. MINUS(차집합): '선행 쿼리문 결과값 -(빼기) 후행 쿼리문 결과값'의 결과; 조건1 AND '조건2의 부정'
*/

-- 2021.11.15(월) SUBQUERY
/* 서브쿼리 구분: 서브쿼리를 수행한 결과값이 몇 행 몇 열이냐에 따라 구분 -> 서브쿼리를 수행한 결과가 몇 행 몇 열이냐에 따라 사용 가능한 연산자도 달라짐
 1. 단일행(+단일열) 서브쿼리: 서브쿼리를 수행한 결과값이 오로지 1개일 때
 2. 다중행(+단일열) 서브쿼리: 서브쿼리를 수행한 결과값이 여러 행일 때
 3. (단일행+)다중열 서브쿼리: 서브쿼리를 수행한 결과값이 여러 열일 때
 4. 다중행 다중열 서브쿼리: 서브쿼리를 수행한 결과값이 여러 행 여러 열일 때
*/

-- 부서별 급여 합이 가장 큰 부서 하나의 부서코드, 부서명, 급여 합 조회
SELECT DEPT_CODE, DEPT_TITLE, SUM(SALARY) -- 그룹 2개 지어줘야 하는데(DEPT_CODE, DEPT_TITLE) 1개 밖에 안 지어서(DEPT_CODE) "ORA-00979: not a GROUP BY expression" 오류
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_CODE, DEPT_TITLE
HAVING SUM(SALARY) = (SELECT MAX(SUM(SALARY)) -- HAVING절에도 서브쿼리 사용 가능
                      FROM EMPLOYEE
                      GROUP BY DEPT_CODE); -- 서브쿼리의 결과값 = 단일행; 17,700,000
                      
SELECT DEPT_CODE, DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE, DEPARTMENT
WHERE DEPT_CODE = DEPT_ID(+)
GROUP BY DEPT_CODE, DEPT_TITLE
HAVING SUM(SALARY) = (SELECT MAX(SUM(SALARY)) FROM EMPLOYEE GROUP BY DEPT_CODE); -- 서브쿼리의 결과값 = 17,700,000 = 단일행

/* 2. 다중행 (단일열) 서브쿼리(MULTI ROW SUBQUERY): 서브쿼리의 조회 결과값이 여러 행일 때
 -> 사용 가능한 연산자
    IN: 여러 개의 결과값 중에서 1개라도 일치하는 값이 있으면
    NOT IN: 아예 없으면
    
    > ANY: 여러 개의 결과값 중에서 '하나라도' 클 경우 = 여러 개의 결과값의 최소값보다 큰 경우
    < ANY: 여러 개의 결과값 중에서 '하나라도' 작을 경우 = 여러 개의 결과값의 최대값보다 작은 경우
    ANY는 OR와 비슷함
    
    > ALL: 여러 개의 결과값 모두보다 큰 경우 = 여러 개의 결과값의 최대값보다 큰 경우
    < ALL: 여러 개의 결과값 모두보다 작은 경우 = 여러 개의 결과값의 최소값보다 작은 경우
    ALL은 AND와 비슷함
*/
-- 대리 직급임에도 불구하고 과장 직급의 급여보다 많이 받은 직원들의 사번, 이름, 직급명, 급여
-- 방법1)
SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY -- 메인쿼리
FROM EMPLOYEE E, JOB J
WHERE E.JOB_CODE = J.JOB_CODE(+)
 AND SALARY > ANY(SELECT SALARY
                  FROM EMPLOYEE E, JOB J
                  WHERE E.JOB_CODE = J.JOB_CODE(+)
                  AND JOB_NAME = '과장') -- 이 서브쿼리의 결과값 = 다중행 단일열 -> 다중행 서브쿼리
 AND JOB_NAME = '대리'; -- 직급이 대리인 사람들 중에서
-- 방법2)
SELECT EMP_NO, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
LEFT JOIN JOB USING (JOB_CODE)
WHERE SALARY > ANY(SELECT SALARY FROM EMPLOYEE LEFT JOIN JOB USING (JOB_CODE) WHERE JOB_NAME = '과장') -- 서브쿼리의 결과값 = 다중행 단일열
 AND JOB_NAME = '대리';
-- 나의 생각: ANY == 과장들의 급여 중 최소값을 구하는 쿼리문을 구해두었다가 그것과 대리들의 SALARY 비교
SELECT EMP_NO, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
LEFT JOIN JOB USING (JOB_CODE)
WHERE SALARY > (SELECT MIN(SALARY) FROM EMPLOYEE LEFT JOIN JOB USING (JOB_CODE) WHERE JOB_NAME = '과장') -- 서브쿼리의 결과값 = 2,200,000 = 단일행 단일열
 AND JOB_NAME = '대리';

/* 3. (단일행) 다중 열 서브쿼리: 조회 결과 값은 1개 행이지만, 나열된 컬럼 수가 여러 개일 때
 -> 사용 가능한 연산자
    (컬럼1, 컬럼2, ..) = (컬럼1 값, 컬럼2 값, ..)
    (컬럼1, 컬럼2, ..) IN (컬럼1 값, 컬럼2 값, ..)
*/
-- 박나라 사원과 같은 직급코드 및 같은 사수사번을 가진 사원들의 사번, 이름, 직급코드, 사수사번, 부서명 조회
SELECT EMP_ID, EMP_NAME, JOB_CODE, MANAGER_ID, DEPT_TITLE
FROM EMPLOYEE E, DEPARTMENT D
-- 단일행 다중열 result set이 나와야 함 = 박나라 사원의 JOB_CODE, MANAGER_ID
WHERE (JOB_CODE, MANAGER_ID) = (SELECT JOB_CODE, MANAGER_ID
                                FROM EMPLOYEE
                                WHERE EMP_NAME = '박나라') -- 서브쿼리의 결과값 = 단일행 다중열; J7, 207
 AND E.DEPT_CODE = D.DEPT_ID(+);

/* 4. 다중행 다중열 서브쿼리: 서브쿼리 조회 결과값이 여러 행+여러 컬럼일 경우
 e.g. 위 예제의 결과물도 서브쿼리로 쓰일 수 있음
 -> 사용 가능한 연산자
    (컬럼1, 컬럼2, ..) IN (컬럼1 값, 컬럼2 값, ..)
*/
-- 각 직급별 최소 급여를 받는 사원들의 사번, 이름, 직급코드, 급여 조회
SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE
WHERE (JOB_CODE, SALARY) IN (SELECT JOB_CODE, MIN(SALARY)
                             FROM EMPLOYEE
                             GROUP BY JOB_CODE); -- 서브쿼리 결과값 = 다중행 다중열

-- 각 부서별(-> 여러 개의 부서 -> 여러 개의 행 결과값이 나올 것임) 최고 급여를 받는 사원들의 이름, 직급코드, 급여(, 부서명) 조회
-- 2021.11.15(월) 복습하며 재작성해봄
SELECT EMP_NAME, JOB_CODE, SALARY, DEPT_CODE
FROM EMPLOYEE
WHERE (DEPT_CODE, SALARY) IN (SELECT DEPT_CODE, MAX(SALARY) FROM EMPLOYEE GROUP BY DEPT_CODE);

-- 각 부서별 최고 급여를 받는 사원들의 사번, 이름, 부서코드, 급여 조회 + 급여로 오름차순 정렬
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY -- SELECT절에는 NVL(DEPT_CODE, '없음') 안 써도 조건에서 NULL '없음'으로 받아온 것 조회해줌
FROM EMPLOYEE
-- DEPT_CODE가 NULL인 경우도 비교하고 받아오기 위해서 NVL()함수 사용
WHERE (NVL(DEPT_CODE, '없음'), SALARY) IN (SELECT NVL(DEPT_CODE, '없음'), MAX(SALARY) -- 그냥 SALARY는 GROUP을 만들어주지 않았기 때문에 여기에 쓸 수는 없음 vs MAX(SALARY)
                                          FROM EMPLOYEE
                                          GROUP BY DEPT_CODE) -- 그룹 만들 때 NULL 그룹 만들어줌; 서브쿼리 결과값 = 다중행 단일열
ORDER BY SALARY;

-- INLINE-VIEW를 주로 사용하는 예: TOP-N분석(데이터베이스 상에 존재하는 자료 중 최상위 데이터 몇 개/최상위 몇 개 자료를 조회(+분석))
-- e.g. 쇼핑몰 > 실시간 BEST(상품이 담기는 테이블에서 가장 많이 팔리는 것 추출/조회), BEST REVIEWS
--      PAGING기법(?) -> (게시글 번호, 게시 시간 등에 따라 정렬해서) 웹사이트 게시판 1페이지에 몇 개의 글이 들어갈 수 있는지
-- 전 직원 중 급여가 가장 높은 5명 조회
-- cf. ROWNUM: ORACLE에서 제공해주는 컬럼; 조회된 순서대로 1부터 ... 순번을 부여해줌
SELECT ROWNUM, EMP_NAME, SALARY -- 실행순서3
FROM (SELECT *
      FROM EMPLOYEE
      ORDER BY SALARY DESC NULLS LAST) -- 실행순서1 -> 급여 순서대로 정렬해서 테이블을 가져오자
WHERE ROWNUM <= 5 -- 실행순서2 -> FROM절의 조회 결과 상위 5개에 번호매김
ORDER BY SALARY DESC; -- 실행순서4
-- 사원들의 급여가 높은 순서 5위까지만 조회
SELECT *
FROM (SELECT EMP_NAME, SALARY, RANK() OVER(ORDER BY SALARY DESC NULLS LAST) "급여 순위"
      FROM EMPLOYEE)
WHERE "급여 순위" <= 5;

-- 각 부서별 평균급여가 높은 3개의 부서의 부서코드, 평균 급여 조회
SELECT ROWNUM, DEPT_CODE, "평균 급여"
FROM (SELECT DEPT_CODE, ROUND(AVG(SALARY)) "평균 급여"
      FROM EMPLOYEE
      GROUP BY DEPT_CODE
      ORDER BY AVG(SALARY) DESC)
WHERE ROWNUM <= 3;
-- 각 부서별 평균급여가 높은 3개의 부서의 부서코드, 평균 급여 조회
SELECT *
FROM (SELECT DEPT_CODE, ROUND(AVG(SALARY)), RANK() OVER(ORDER BY AVG(SALARY) DESC) "급여 순위"
      FROM EMPLOYEE
      GROUP BY DEPT_CODE)
WHERE "급여 순위" <= 3;
